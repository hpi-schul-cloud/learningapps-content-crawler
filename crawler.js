var resourceName="LearningApps.org";
/**
 * Convert/translate learningapps meta data to intended format.
 * TODO: this should be in another place OR be generated by schema
 * @param {*} sourceItems 
 */
function _getItemsMeta(sourceItems) {
    var metaItems = []
    sourceItems.map(function (item) {
        
        //First tag shall always be the title of the channel
        var tags = item['$tags'] || [];
        tags.unshift(resourceName);

        metaItems.push({
            originId: item['$id'],
            providerName: resourceName,
            url: "https:"+item['$iframeurl'],
            title: item['$title'],
            description: "LearningApps.org unterst√ºtzt Lern- und Lehrprozesse mit kleinen interaktiven, multimedialen Bausteinen, die online erstellt und in Lerninhalte eingebunden werden. In diesem Baustein geht es um: "+item['$tags'].join(", ")+"." ,
            thumbnail: item['$image'],
            contentCategory: 'atomic',
            subject: item['$category'],
            tags:  tags,
            mimeType: 'text/html',
            licenses: ["CC BY"]
        })
    })
    
    return metaItems;
}


module.exports = {
    crawl: function (config, fetcher, fetchCallback) {
        _config = config;
        fetcher.fetch({
            api_url: _config.api_url
        }, function (sourceItems) {
            fetchCallback(_getItemsMeta(sourceItems));
        })

    },
    configSpec: {
        api_url: {
            env: "api_url",
            type: "string",
            default: "api_url as string"
        }
    }
}